extern crate wain_exec;
extern crate wain_syntax_binary;
extern crate wain_validate;

use std::process::exit;
use wain_exec::{execute, Run};
use wain_syntax_binary::parse;
use wain_validate::validate;

// examples/hello/hello.wasm
const HELLO_WORLD: [u8; 381] = [
    0x0, 0x61, 0x73, 0x6d, 0x1, 0x0, 0x0, 0x0, 0x1, 0xd, 0x3, 0x60, 0x1, 0x7f, 0x1, 0x7f, 0x60,
    0x1, 0x7f, 0x0, 0x60, 0x0, 0x0, 0x2, 0xf, 0x1, 0x3, 0x65, 0x6e, 0x76, 0x7, 0x70, 0x75, 0x74,
    0x63, 0x68, 0x61, 0x72, 0x0, 0x0, 0x3, 0x3, 0x2, 0x1, 0x2, 0x4, 0x5, 0x1, 0x70, 0x1, 0x1, 0x1,
    0x5, 0x3, 0x1, 0x0, 0x2, 0x6, 0x8, 0x1, 0x7f, 0x1, 0x41, 0x90, 0x88, 0x4, 0xb, 0x7, 0x13, 0x2,
    0x6, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x2, 0x0, 0x6, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
    0x0, 0x2, 0xa, 0xc2, 0x1, 0x2, 0xa9, 0x1, 0x1, 0x12, 0x7f, 0x23, 0x80, 0x80, 0x80, 0x80, 0x0,
    0x21, 0x1, 0x41, 0x10, 0x21, 0x2, 0x20, 0x1, 0x20, 0x2, 0x6b, 0x21, 0x3, 0x20, 0x3, 0x24, 0x80,
    0x80, 0x80, 0x80, 0x0, 0x20, 0x3, 0x20, 0x0, 0x36, 0x2, 0xc, 0x2, 0x40, 0x3, 0x40, 0x20, 0x3,
    0x28, 0x2, 0xc, 0x21, 0x4, 0x20, 0x4, 0x2d, 0x0, 0x0, 0x21, 0x5, 0x41, 0x18, 0x21, 0x6, 0x20,
    0x5, 0x20, 0x6, 0x74, 0x21, 0x7, 0x20, 0x7, 0x20, 0x6, 0x75, 0x21, 0x8, 0x20, 0x8, 0x45, 0xd,
    0x1, 0x20, 0x3, 0x28, 0x2, 0xc, 0x21, 0x9, 0x20, 0x9, 0x2d, 0x0, 0x0, 0x21, 0xa, 0x41, 0x18,
    0x21, 0xb, 0x20, 0xa, 0x20, 0xb, 0x74, 0x21, 0xc, 0x20, 0xc, 0x20, 0xb, 0x75, 0x21, 0xd, 0x20,
    0xd, 0x10, 0x80, 0x80, 0x80, 0x80, 0x0, 0x1a, 0x20, 0x3, 0x28, 0x2, 0xc, 0x21, 0xe, 0x41, 0x1,
    0x21, 0xf, 0x20, 0xe, 0x20, 0xf, 0x6a, 0x21, 0x10, 0x20, 0x3, 0x20, 0x10, 0x36, 0x2, 0xc, 0xc,
    0x0, 0xb, 0xb, 0x41, 0x10, 0x21, 0x11, 0x20, 0x3, 0x20, 0x11, 0x6a, 0x21, 0x12, 0x20, 0x12,
    0x24, 0x80, 0x80, 0x80, 0x80, 0x0, 0xf, 0xb, 0x15, 0x1, 0x1, 0x7f, 0x41, 0x80, 0x88, 0x80,
    0x80, 0x0, 0x21, 0x0, 0x20, 0x0, 0x10, 0x81, 0x80, 0x80, 0x80, 0x0, 0xf, 0xb, 0xb, 0x15, 0x1,
    0x0, 0x41, 0x80, 0x8, 0xb, 0xe, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x2c, 0x20, 0x77, 0x6f, 0x72,
    0x6c, 0x64, 0xa, 0x0, 0x0, 0x20, 0x4, 0x6e, 0x61, 0x6d, 0x65, 0x1, 0x19, 0x3, 0x0, 0x7, 0x70,
    0x75, 0x74, 0x63, 0x68, 0x61, 0x72, 0x1, 0x5, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x2, 0x6, 0x5f,
    0x73, 0x74, 0x61, 0x72, 0x74, 0x0, 0x25, 0x9, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72,
    0x73, 0x1, 0xc, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x2d, 0x62, 0x79, 0x1,
    0x5, 0x63, 0x6c, 0x61, 0x6e, 0x67, 0x5, 0x39, 0x2e, 0x30, 0x2e, 0x31,
];

fn main() {
    // Parse binary into syntax tree
    let tree = match parse(&HELLO_WORLD) {
        Ok(tree) => tree,
        Err(err) => {
            eprintln!("Parse failed: {}", err);
            exit(1);
        }
    };

    // Validate module
    if let Err(err) = validate(&tree) {
        eprintln!("This .wasm file is invalid!: {}", err);
        exit(1);
    }

    // Execute module
    match execute(tree.module) {
        Ok(run) => {
            if let Run::Warning(msg) = run {
                eprintln!("Warning: {}", msg);
            }
        }
        Err(trap) => eprintln!("Execution was trapped: {}", trap),
    }
}
